#include <Arduino.h>
#include <utility>
#include <WiFiS3.h>

#include "configurations.h"
#include "ring_queue.h"
#include "rtc_config.h"

namespace {
const int PD = 2;
const int SENSOR_PIN = A0;
const long SENSOR_READ_INTERVAL = 2000;
const int LIMIT = 850;

volatile int ready_to_transmit = 0;
long prev_sensor_read_millis = 0;


using buffer::RingQueue;
using TaskFunction = void(*)(int);

struct Task {
  int task_input;
  TaskFunction task;

  void operator()() {
    task(task_input);
  }
};

RingQueue<Task> queue;
WiFiUDP udp;

// void ReadSensor(int sensor_pin){
//   // int sensor_value = analogRead(sensor_pin);
//   // Serial.print("Sensor Value: ");
//   // Serial.println(sensor_value);

//   Task task_to_queue = {sensor_value, [](int value){
//     RTCTime curr_time;
//     RTC.getTime(curr_time);
//     auto payload = curr_time.toString() + ", " + String(value);
//     udp.beginPacket(udp.remoteIP(), udp.remotePort());
//     udp.print(payload);
//     udp.endPacket();
//   }};

//   queue.Enque(std::move(task_to_queue));
// };

} // namespace

void setup() {
  Serial.begin(9600);

  pinMode(PD, OUTPUT);
  digitalWrite(PD, HIGH);
  
  while (wifi_configs::ConnectToWiFi(wifi_configs::SSID, wifi_configs::PWD)) {
    Serial.println("Unable to connect to Wifi..."
      "You are currently trapped in an infinite loop!!!");
  }

  udp.begin(wifi_configs::PORT);
  Serial.print("UDP Server started on port: ");
  Serial.println(wifi_configs::PORT);

  while(!ready_to_transmit) {
   config::WaitForClockConfiguration(udp, [](){
      ready_to_transmit = 1;
    });
  }
}

void loop() {
  int sensor_value = analogRead(SENSOR_PIN);
  Serial.print("Sensor Value: ");
  Serial.println(sensor_value);
  // delay(100);
  // unsigned long current_millis = millis();
  // if (current_millis - prev_sensor_read_millis >= SENSOR_READ_INTERVAL) {
  //   prev_sensor_read_millis = current_millis;

  //   Task task_to_queue = {SENSOR_PIN, [](int value){
  //     ReadSensor(value);
  //   }};

  //   queue.Enque(std::move(task_to_queue));
  // }

  // queue.Schedule();
}

